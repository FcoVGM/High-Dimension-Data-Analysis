
## Hiearchichal Clustering Exercises


### Hiearchichal Clustering Exercises #1

Create a random matrix with no correlation in the following way:

```{r}
library(rafalib)

set.seed(1)
m = 10000
n = 24
x = matrix(rnorm(m*n),m,n)
colnames(x)=1:n
```  

Run hierarchical clustering on this data with the hclust function with default parameters to cluster the columns. Create a dendrogram.

From the dendrogram which pairs of samples are the furthest away from each other?

```{r}
hc = hclust( dist( t(x)))
plot(hc)
```

        ####In the plot see the pairs that are furthest and that is the answer



### Hiearchichal Clustering Exercises #2

Set the seed at 1, set.seed(1) and replicate the creation of this matrix 100 times

```{r}
m = 10000
n = 24
x = matrix(rnorm(m*n),m,n)
```

then perform hierarchical clustering as in the solution to question 2.4.1 and find the number of clusters if you use cutree at height 143. Note that this number is a random variable.

Based on the Monte Carlo simulation, what is the standard error of this random variable?

```{r}
set.seed(1)
m = 10000
n = 24
nc = replicate(100,{
x = matrix(rnorm(m*n),m,n)
hc = hclust( dist( t(x)))
length(unique(cutree(hc,h=143)))
})
plot(table(nc)) ## look at the distribution
popsd(nc)
```




## K-means Exercises

### K-means Exercises #1

Run kmeans with 4 centers for the blood RNA data:

```{r}
library(GSE5859Subset)
data(GSE5859Subset)
```

Set the seed to 10, set.seed(10) right before running kmeans with 5 centers.

Explore the relationship of clusters and information in sampleInfo. Which of th following best described what you find:

```{r}
mds=cmdscale(dist(t(geneExpression)))
set.seed(10)
result=kmeans(t(geneExpression),5)
mypar(1,1)
plot(mds,bg=result$cl,pch=21)
table(sampleInfo$group,result$cluster)
table(sampleInfo$date,result$cluster)
##looks better if we re-order:
table(sampleInfo$date,result$cluster)[,c(4,1,5,3,2)]
```


- Date is driving the clusters**




## Heat Maps Exercises

### Heat Maps Exercises #1

Load the data:

```{r}
library(GSE5859Subset)
data(GSE5859Subset)
```

Pick the 25 genes with the highest across sample variance. This function might help

```{r}
install.packages("matrixStats")
library(matrixStats)
?rowMads ##we use mads due to a outlier sample
```

While a heatmap function is included in R, we recommend the heatmap.2 function from the gplots package on CRAN because it is a bit more customized. For example, it stretches to fill the window.

```{r}
library(gplots)
```

Use heatmap.2 to make a heatmap showing the sampleInfo$group with color, the date as labels, the rows labelled with chromosome, and scaling the rows.

What do we learn from this heatmap?

```{r}
##load libraries
library(rafalib)
library(gplots)
library(matrixStats)
library(RColorBrewer)
##make colors
cols = colorRampPalette(rev(brewer.pal(11,"RdBu")))(25)
gcol=brewer.pal(3,"Dark2")
gcol=gcol[sampleInfo$g+1]

##make lables: remove 2005 since it's common to all
labcol= gsub("2005-","",sampleInfo$date)  

##pick highly variable genes:
sds =rowMads(geneExpression)
ind = order(sds,decreasing=TRUE)[1:25]

## make heatmap
heatmap.2(geneExpression[ind,],
          col=cols,
          trace="none",
          scale="row",
          labRow=geneAnnotation$CHR[ind],
          labCol=labcol,
          ColSideColors=gcol,
          key=FALSE)
```    
    

- A group of chrY genes are higher in group 0 and appear to drive the clustering. Within those clusters there appears to be clustering by month.




### Heat Maps Exercises #2

Create a large data set of random data that is completely independent of sampleInfo$group like this:

```{r}
set.seed(17)
m = nrow(geneExpression)
n = ncol(geneExpression)
x = matrix(rnorm(m*n),m,n)
g = factor(sampleInfo$g )
```

Create two heatmaps with these data. Show the group g either with labels or colors.

1. Taking the 50 genes with smallest p-values obtained with rowttests

2. Taking the 50 genes with largest standard deviations.

Which of the following statements is true:

```{r}
library(gplots)
library(matrixStats)
library(genefilter)
library(RColorBrewer)
cols = colorRampPalette(rev(brewer.pal(11,"RdBu")))(25)

ttest = rowttests(x,g)
sds = rowSds(x)
Indexes = list(t=order(ttest$p.value)[1:50], s=order(-sds)[1:50])
for(ind in Indexes){
 heatmap.2(x[ind,],
          col=cols,
          trace="none",
          scale="row",
          labCol=g,
          key=FALSE)
 }
```

- There is no relationship between g and x but with 8,793 tests some will appear significant by chance. Selecting genes with the t-test gives us a deceiving result.



### Conditional Expectations

Throughout this assessment it will be useful to remember that when our data are 0s and 1s probabilities and expectations are the same thing. We can do the math, but here is some R code:

```{r}
n = 1000
y = rbinom(n,1,0.25)
##proportion of ones Pr(Y)
sum(y==1)/length(y)
##expectaion of Y
mean(y)
```
